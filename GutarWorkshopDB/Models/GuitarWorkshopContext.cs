// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace GutarWorkshopDB.Models;

public partial class GuitarWorkshopContext : DbContext
{
    public GuitarWorkshopContext(DbContextOptions<GuitarWorkshopContext> options)
        : base(options)
    {
    }

    public virtual DbSet<BodyShape> BodyShapes { get; set; }

    public virtual DbSet<Finish> Finishes { get; set; }

    public virtual DbSet<FretNumberType> FretNumberTypes { get; set; }

    public virtual DbSet<GuitarBuild> GuitarBuilds { get; set; }

    public virtual DbSet<GuitarColor> GuitarColors { get; set; }

    public virtual DbSet<HeadstockStyle> HeadstockStyles { get; set; }

    public virtual DbSet<NeckScale> NeckScales { get; set; }

    public virtual DbSet<NeckShape> NeckShapes { get; set; }

    public virtual DbSet<Role> Roles { get; set; }

    public virtual DbSet<StringType> StringTypes { get; set; }

    public virtual DbSet<TuningMachine> TuningMachines { get; set; }

    public virtual DbSet<User> Users { get; set; }

    public virtual DbSet<WoodsType> WoodsTypes { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<BodyShape>(entity =>
        {
            entity.HasKey(e => e.ShapeId).HasName("body_shapes_pkey");

            entity.ToTable("body_shapes");

            entity.Property(e => e.ShapeId).HasColumnName("shape_id");
            entity.Property(e => e.Price)
                .HasColumnType("money")
                .HasColumnName("price");
            entity.Property(e => e.ShapeName)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("shape_name");
        });

        modelBuilder.Entity<Finish>(entity =>
        {
            entity.HasKey(e => e.FinishId).HasName("finishes_pkey");

            entity.ToTable("finishes");

            entity.Property(e => e.FinishId).HasColumnName("finish_id");
            entity.Property(e => e.FinishName)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("finish_name");
            entity.Property(e => e.Price)
                .HasColumnType("money")
                .HasColumnName("price");
        });

        modelBuilder.Entity<FretNumberType>(entity =>
        {
            entity.HasKey(e => e.TypeId).HasName("fret_number_types_pkey");

            entity.ToTable("fret_number_types");

            entity.Property(e => e.TypeId).HasColumnName("type_id");
            entity.Property(e => e.FretNumber).HasColumnName("fret_number");
            entity.Property(e => e.Price)
                .HasColumnType("money")
                .HasColumnName("price");
        });

        modelBuilder.Entity<GuitarBuild>(entity =>
        {
            entity.HasKey(e => e.BuildId).HasName("guitar_builds_pkey");

            entity.ToTable("guitar_builds");

            entity.Property(e => e.BuildId).HasColumnName("build_id");
            entity.Property(e => e.BodyShapeId).HasColumnName("body_shape_id");
            entity.Property(e => e.BottomDeckMaterialId).HasColumnName("bottom_deck_material_id");
            entity.Property(e => e.ColorId).HasColumnName("color_id");
            entity.Property(e => e.FingerboardMaterialId).HasColumnName("fingerboard_material_id");
            entity.Property(e => e.FinishId).HasColumnName("finish_id");
            entity.Property(e => e.FretNubmberTypeId).HasColumnName("fret_nubmber_type_id");
            entity.Property(e => e.HeadstockStyleId).HasColumnName("headstock_style_id");
            entity.Property(e => e.NeckMaterialId).HasColumnName("neck_material_id");
            entity.Property(e => e.NeckScaleId).HasColumnName("neck_scale_id");
            entity.Property(e => e.NeckShapeId).HasColumnName("neck_shape_id");
            entity.Property(e => e.StringId).HasColumnName("string_id");
            entity.Property(e => e.TopDeckMaterialId).HasColumnName("top_deck_material_id");
            entity.Property(e => e.TotalPrice)
                .HasColumnType("money")
                .HasColumnName("total_price");
            entity.Property(e => e.TuningMachineId).HasColumnName("tuning_machine_id");
            entity.Property(e => e.UserId).HasColumnName("user_id");

            entity.HasOne(d => d.BodyShape).WithMany(p => p.GuitarBuilds)
                .HasForeignKey(d => d.BodyShapeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("guitar_builds_body_shape_id_fkey");

            entity.HasOne(d => d.BottomDeckMaterial).WithMany(p => p.GuitarBuildBottomDeckMaterials)
                .HasForeignKey(d => d.BottomDeckMaterialId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("guitar_builds_bottom_deck_material_id_fkey");

            entity.HasOne(d => d.Color).WithMany(p => p.GuitarBuilds)
                .HasForeignKey(d => d.ColorId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("guitar_builds_color_id_fkey");

            entity.HasOne(d => d.FingerboardMaterial).WithMany(p => p.GuitarBuildFingerboardMaterials)
                .HasForeignKey(d => d.FingerboardMaterialId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("guitar_builds_fingerboard_material_id_fkey");

            entity.HasOne(d => d.Finish).WithMany(p => p.GuitarBuilds)
                .HasForeignKey(d => d.FinishId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("guitar_builds_finish_id_fkey");

            entity.HasOne(d => d.FretNubmberType).WithMany(p => p.GuitarBuilds)
                .HasForeignKey(d => d.FretNubmberTypeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("guitar_builds_fret_nubmber_type_id_fkey");

            entity.HasOne(d => d.HeadstockStyle).WithMany(p => p.GuitarBuilds)
                .HasForeignKey(d => d.HeadstockStyleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("guitar_builds_headstock_style_id_fkey");

            entity.HasOne(d => d.NeckMaterial).WithMany(p => p.GuitarBuildNeckMaterials)
                .HasForeignKey(d => d.NeckMaterialId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("guitar_builds_neck_material_id_fkey");

            entity.HasOne(d => d.NeckScale).WithMany(p => p.GuitarBuilds)
                .HasForeignKey(d => d.NeckScaleId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("guitar_builds_neck_scale_id_fkey");

            entity.HasOne(d => d.NeckShape).WithMany(p => p.GuitarBuilds)
                .HasForeignKey(d => d.NeckShapeId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("guitar_builds_neck_shape_id_fkey");

            entity.HasOne(d => d.String).WithMany(p => p.GuitarBuilds)
                .HasForeignKey(d => d.StringId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("guitar_builds_string_id_fkey");

            entity.HasOne(d => d.TopDeckMaterial).WithMany(p => p.GuitarBuildTopDeckMaterials)
                .HasForeignKey(d => d.TopDeckMaterialId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("guitar_builds_top_deck_material_id_fkey");

            entity.HasOne(d => d.TuningMachine).WithMany(p => p.GuitarBuilds)
                .HasForeignKey(d => d.TuningMachineId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("guitar_builds_tuning_machine_id_fkey");

            entity.HasOne(d => d.User).WithMany(p => p.GuitarBuilds)
                .HasForeignKey(d => d.UserId)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("guitar_builds_user_id_fkey");
        });

        modelBuilder.Entity<GuitarColor>(entity =>
        {
            entity.HasKey(e => e.ColorId).HasName("guitar_colors_pkey");

            entity.ToTable("guitar_colors");

            entity.Property(e => e.ColorId).HasColumnName("color_id");
            entity.Property(e => e.Color)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("color");
        });

        modelBuilder.Entity<HeadstockStyle>(entity =>
        {
            entity.HasKey(e => e.StyleId).HasName("headstock_styles_pkey");

            entity.ToTable("headstock_styles");

            entity.Property(e => e.StyleId).HasColumnName("style_id");
            entity.Property(e => e.Price)
                .HasColumnType("money")
                .HasColumnName("price");
            entity.Property(e => e.StyleName)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("style_name");
        });

        modelBuilder.Entity<NeckScale>(entity =>
        {
            entity.HasKey(e => e.ScaleId).HasName("neck_scales_pkey");

            entity.ToTable("neck_scales");

            entity.Property(e => e.ScaleId).HasColumnName("scale_id");
            entity.Property(e => e.Price)
                .HasColumnType("money")
                .HasColumnName("price");
            entity.Property(e => e.ScaleLength).HasColumnName("scale_length");
        });

        modelBuilder.Entity<NeckShape>(entity =>
        {
            entity.HasKey(e => e.ShapeId).HasName("neck_shapes_pkey");

            entity.ToTable("neck_shapes");

            entity.Property(e => e.ShapeId).HasColumnName("shape_id");
            entity.Property(e => e.Price)
                .HasColumnType("money")
                .HasColumnName("price");
            entity.Property(e => e.ShapeName)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("shape_name");
        });

        modelBuilder.Entity<Role>(entity =>
        {
            entity.HasKey(e => e.RoleId).HasName("roles_pkey");

            entity.ToTable("roles");

            entity.Property(e => e.RoleId).HasColumnName("role_id");
            entity.Property(e => e.RoleName)
                .IsRequired()
                .HasMaxLength(100)
                .HasColumnName("role_name");
        });

        modelBuilder.Entity<StringType>(entity =>
        {
            entity.HasKey(e => e.StringId).HasName("string_types_pkey");

            entity.ToTable("string_types");

            entity.Property(e => e.StringId).HasColumnName("string_id");
            entity.Property(e => e.Price)
                .HasColumnType("money")
                .HasColumnName("price");
            entity.Property(e => e.StringName)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("string_name");
        });

        modelBuilder.Entity<TuningMachine>(entity =>
        {
            entity.HasKey(e => e.MachineId).HasName("tuning_machines_pkey");

            entity.ToTable("tuning_machines");

            entity.Property(e => e.MachineId).HasColumnName("machine_id");
            entity.Property(e => e.MachineName)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("machine_name");
            entity.Property(e => e.Price)
                .HasColumnType("money")
                .HasColumnName("price");
        });

        modelBuilder.Entity<User>(entity =>
        {
            entity.HasKey(e => e.UserId).HasName("users_pkey");

            entity.ToTable("users");

            entity.Property(e => e.UserId).HasColumnName("user_id");
            entity.Property(e => e.Login)
                .HasMaxLength(100)
                .HasColumnName("login");
            entity.Property(e => e.PasswordHash)
                .HasMaxLength(255)
                .HasColumnName("password_hash");
            entity.Property(e => e.RoleId).HasColumnName("role_id");

            entity.HasOne(d => d.Role).WithMany(p => p.Users)
                .HasForeignKey(d => d.RoleId)
                .HasConstraintName("users_role_id_fkey");
        });

        modelBuilder.Entity<WoodsType>(entity =>
        {
            entity.HasKey(e => e.TypeId).HasName("woods_types_pkey");

            entity.ToTable("woods_types");

            entity.Property(e => e.TypeId).HasColumnName("type_id");
            entity.Property(e => e.PartType)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("part_type");
            entity.Property(e => e.Price)
                .HasColumnType("money")
                .HasColumnName("price");
            entity.Property(e => e.WoodName)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("wood_name");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}